// python_iot/Jenkinsfile (Scripted Pipeline with credentials)

stage('Show Docker Contexts') {
    echo 'Listing Docker contexts...'
    sh 'docker context ls'
    echo 'Current Docker context:'
    sh 'docker context show'
}

stage('Checkout') {
    git url: 'https://github.com/amits781/home_iot.git', branch: 'main'
}

stage('Generate newrelic.ini') {
    dir('python_iot') {
        withCredentials([string(credentialsId: 'PYTHON_NEW_RELIC_KEY_CRED', variable: 'NEW_RELIC_KEY')]) {
            sh '''
            export PYTHON_NEW_RELIC_LICENSE_KEY="$NEW_RELIC_KEY"
            envsubst < newrelic_template.ini > newrelic.ini
            '''
        }
    }
}

stage('Build Docker Image') {
    dir('python_iot') {
        dockerImage = docker.build("python-iot-device:latest", "--no-cache .")
    }
}

stage('Cleanup Existing Container') {
    sh '''
    existing_container=$(docker ps -aq -f name=python_sinric_device)
    if [ ! -z "$existing_container" ]; then
        docker rm -f $existing_container
    fi
    '''
}

stage('Run Docker Container') {
    withCredentials([
        string(credentialsId: 'PYTHON_APP_KEY', variable: 'APP_KEY'),
        string(credentialsId: 'PYTHON_APP_SECRET', variable: 'APP_SECRET'),
        string(credentialsId: 'PYTHON_SWITCH_ID', variable: 'SWITCH_ID'),
        string(credentialsId: 'PYTHON_SPRING_URL', variable: 'SPRING_URL')
    ]) {
        dir('python_iot') {
            sh '''
            docker run --rm \\
                --network iotnet \\
                -d \\
                --name python_sinric_device \\
                -e APP_KEY="$APP_KEY" \\
                -e APP_SECRET="$APP_SECRET" \\
                -e SWITCH_ID="$SWITCH_ID" \\
                -e URL="$SPRING_URL" \\
                python-iot-device:latest
            '''
        }
    }
}

echo 'Pipeline finished.'
